{"version":3,"sources":["components/UI/Loader/Loader.js","pages/YourOrders/YourOrders.js"],"names":["loader","className","YourOrders","this","props","onFetchPizzaTypesOrders","onFetchPizzaMakerOrders","pizzaTypesOrders","key","push","id","address","fetchedTypesOrders","customerInfo","street","totalPrice","pizzas","Object","keys","map","pizza","name","size","price","pizzaMakerOrders","fetchedMakerOrders","cheese","additions","ingredients","ing","pizzaTypesOrdersDisplay","order","length","pizzaTypesLoading","fetchPizzaTypesError","style","textAlign","fontSize","padding","Loader","backgroundColor","pizzaMakerOrdersDisplay","pizzaMakerLoading","fetchPizzaMakerError","allOrders","Fragment","isAuthenticated","to","width","margin","Component","connect","state","pizzaTypes","fetchedOrders","pizzaMaker","authenticate","token","pizzaTypesOrdersLoading","pizzaMakerOrdersLoading","dispatch","actions"],"mappings":"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","file":"static/js/10.6ffec1db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './loader.scss';\r\n\r\nconst loader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      Loading...\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default loader;\r\n","import React, { Component } from 'react';\r\nimport './your-orders.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { Link } from 'react-router-dom';\r\nimport Loader from '../../components/UI/Loader/Loader';\r\n\r\nclass YourOrders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchPizzaTypesOrders();\r\n    this.props.onFetchPizzaMakerOrders();\r\n  }\r\n  render() {\r\n    // make array of pizza types fetched orders\r\n    const pizzaTypesOrders = [];\r\n    for(let key in this.props.fetchedTypesOrders) {\r\n      pizzaTypesOrders.push({\r\n        id: key,\r\n        address: this.props.fetchedTypesOrders[key].customerInfo.street,\r\n        totalPrice: this.props.fetchedTypesOrders[key].totalPrice,\r\n        pizzas: Object.keys(this.props.fetchedTypesOrders[key].pizzas)\r\n          .map(pizza => {\r\n            return {\r\n              name: this.props.fetchedTypesOrders[key].pizzas[pizza].name,\r\n              size: this.props.fetchedTypesOrders[key].pizzas[pizza].size,\r\n              price: this.props.fetchedTypesOrders[key].pizzas[pizza].price\r\n            }\r\n          })\r\n      })\r\n    }\r\n\r\n    // make array of pizza maker fetched orders\r\n    const pizzaMakerOrders = [];\r\n    for(const key in this.props.fetchedMakerOrders) {\r\n      pizzaMakerOrders.push({\r\n        id: key,\r\n        cheese: this.props.fetchedMakerOrders[key].cheese,\r\n        additions: this.props.fetchedMakerOrders[key].additions,\r\n        ingredients: Object.keys(this.props.fetchedMakerOrders[key].ingredients)\r\n          .map(ing => ing),\r\n        address: this.props.fetchedMakerOrders[key].customerInfo.street,\r\n        price: this.props.fetchedMakerOrders[key].totalPrice\r\n      });\r\n    }\r\n\r\n    let pizzaTypesOrdersDisplay = (\r\n      <ul className=\"orders__orders-pizza-types__list\">\r\n        {pizzaTypesOrders.map(order => {\r\n          return (\r\n            <li\r\n              key={order.id}\r\n              className=\"orders__orders-pizza-types__order\">\r\n              <p className=\"orders__orders-pizza-types__text\">\r\n                Your pizzas\r\n              </p>\r\n              <ul className=\"orders__orders-pizza-types__pizzas\">\r\n                {order.pizzas.map(pizza => (\r\n                  <li\r\n                    key={order.id + pizza.name}\r\n                    className=\"single-order-pizza\">\r\n                    <p className=\"single-order-pizza__name\">\r\n                      {pizza.name}\r\n                    </p>\r\n                    <p className=\"single-order-pizza__size\">\r\n                      size: {pizza.size}cm\r\n                    </p>\r\n                    <p className=\"single-order-pizza__price\">\r\n                      price: ${pizza.price}\r\n                    </p>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <p className=\"orders__orders-pizza-types__address\">\r\n                delivery street: {order.address}\r\n              </p>\r\n              <p className=\"orders__orders-pizza-types__price\">\r\n                total price: ${order.totalPrice}\r\n              </p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n\r\n    if(pizzaTypesOrders.length === 0 && !this.props.pizzaTypesLoading && !this.props.fetchPizzaTypesError) {\r\n      pizzaTypesOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\"}}>You haven't ordered anything via \"pizza types orders\" yet</p>\r\n    }\r\n    if(this.props.pizzaTypesLoading && !this.props.fetchPizzaTypesError) {\r\n      pizzaTypesOrdersDisplay = <Loader />;\r\n    }\r\n    if(this.props.fetchPizzaTypesError) {\r\n      pizzaTypesOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\", backgroundColor: \"salmon\"}}>Can't display orders. Try again later.</p>\r\n    }\r\n\r\n    let pizzaMakerOrdersDisplay = (\r\n      <ul className=\"orders__orders-pizza-maker__list\">\r\n        {pizzaMakerOrders.map(order => (\r\n          <li\r\n            key={order.id}\r\n            className=\"orders__orders-pizza-maker__order\">\r\n            <p className=\"pizza-maker__order-name\">\r\n              Your custom pizza with following ingredients:\r\n            </p>\r\n            <ul className=\"pizza-maker__order-ings\">\r\n              <li className=\"pizza-maker__order-ing\">\r\n                {order.cheese}\r\n              </li>\r\n                {order.ingredients.map(ing => (\r\n                  <li\r\n                    key={ing}\r\n                    className=\"pizza-maker__order-ing\">\r\n                    {ing}\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"pizza-maker__order-address\">\r\n              delivery street: {order.address}\r\n            </p>\r\n            <p className=\"pizza-maker__order-price\">\r\n              price: ${order.price}\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n\r\n    if(pizzaMakerOrders.length === 0 && !this.props.pizzaMakerLoading && !this.props.fetchPizzaMakerError) {\r\n      pizzaMakerOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\"}}>You haven't ordered anything via \"pizza maker orders yet\"</p>\r\n    }\r\n\r\n    if(this.props.pizzaMakerLoading && !this.props.fetchPizzaMakerError) {\r\n      pizzaMakerOrdersDisplay = <Loader />;\r\n    }\r\n    if(this.props.fetchPizzaMakerError) {\r\n      pizzaMakerOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\", backgroundColor: \"salmon\"}}>Can't display orders. Try again later.</p>\r\n    }\r\n\r\n    let allOrders = (\r\n      <React.Fragment>\r\n        <h1 className=\"orders__title\">\r\n          your orders\r\n        </h1>\r\n        <section className=\"orders__content\">\r\n          <p className=\"orders__content-info\">\r\n            You can find all of your previous orders here.\r\n          </p>\r\n          <article className=\"orders__orders\">\r\n            <div className=\"orders__orders-pizza-types\">\r\n              <h4>Regular orders</h4>\r\n              {pizzaTypesOrdersDisplay}\r\n            </div>\r\n            <div className=\"orders__orders-pizza-maker\">\r\n              <h4>Custom pizza orders</h4>\r\n              {pizzaMakerOrdersDisplay}\r\n            </div>\r\n          </article>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n\r\n    if(!this.props.isAuthenticated) {\r\n      allOrders = (\r\n        <React.Fragment>\r\n          <p style={{fontSize: \"3rem\", textAlign: \"center\", padding: \"5rem\"}}>LOG IN TO SEE ALL ORDERS FROM THIS ADDRESS</p>\r\n          <Link \r\n            to=\"sign-up\"\r\n            style={{\r\n              fontSize: \"2rem\",\r\n              width: \"10rem\",\r\n              margin: \"0 auto 2rem auto\",\r\n              backgroundColor: \"#eee\",\r\n              textAlign: \"center\",\r\n              padding: \"0.5rem 1rem\"\r\n            }}>log in</Link>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return allOrders;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    fetchedTypesOrders: state.pizzaTypes.fetchedOrders,\r\n    fetchedMakerOrders: state.pizzaMaker.fetchedOrders,\r\n    isAuthenticated: state.authenticate.token !==null,\r\n    pizzaTypesLoading: state.pizzaTypes.pizzaTypesOrdersLoading,\r\n    pizzaMakerLoading: state.pizzaMaker.pizzaMakerOrdersLoading,\r\n    fetchPizzaMakerError: state.pizzaMaker.fetchPizzaMakerError,\r\n    fetchPizzaTypesError: state.pizzaTypes.fetchPizzaTypesError\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchPizzaTypesOrders: () => dispatch(actions.fetchPizzaTypesOrders()),\r\n    onFetchPizzaMakerOrders: () => dispatch(actions.fetchPizzaMakerOrders())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YourOrders);\r\n"],"sourceRoot":""}