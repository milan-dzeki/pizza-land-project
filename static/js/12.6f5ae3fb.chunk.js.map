{"version":3,"sources":["pages/YourOrders/YourOrders.js"],"names":["YourOrders","this","props","onFetchPizzaTypesOrders","onFetchPizzaMakerOrders","pizzaTypesOrders","key","push","id","address","fetchedTypesOrders","customerInfo","street","totalPrice","pizzas","Object","keys","map","pizza","name","size","price","pizzaMakerOrders","fetchedMakerOrders","cheese","additions","ingredients","ing","pizzaTypesOrdersDisplay","className","order","length","style","textAlign","fontSize","padding","pizzaMakerOrdersDisplay","allOrders","Fragment","isAuthenticated","to","width","margin","backgroundColor","Component","connect","state","pizzaTypes","fetchedOrders","pizzaMaker","authenticate","token","dispatch","actions"],"mappings":"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","file":"static/js/12.6f5ae3fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './your-orders.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass YourOrders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchPizzaTypesOrders();\r\n    this.props.onFetchPizzaMakerOrders();\r\n  }\r\n  render() {\r\n    // make array of pizza types fetched orders\r\n    const pizzaTypesOrders = [];\r\n    for(let key in this.props.fetchedTypesOrders) {\r\n      pizzaTypesOrders.push({\r\n        id: key,\r\n        address: this.props.fetchedTypesOrders[key].customerInfo.street,\r\n        totalPrice: this.props.fetchedTypesOrders[key].totalPrice,\r\n        pizzas: Object.keys(this.props.fetchedTypesOrders[key].pizzas)\r\n          .map(pizza => {\r\n            return {\r\n              name: this.props.fetchedTypesOrders[key].pizzas[pizza].name,\r\n              size: this.props.fetchedTypesOrders[key].pizzas[pizza].size,\r\n              price: this.props.fetchedTypesOrders[key].pizzas[pizza].price\r\n            }\r\n          })\r\n      })\r\n    }\r\n\r\n    // make array of pizza maker fetched orders\r\n    const pizzaMakerOrders = [];\r\n    for(const key in this.props.fetchedMakerOrders) {\r\n      pizzaMakerOrders.push({\r\n        id: key,\r\n        cheese: this.props.fetchedMakerOrders[key].cheese,\r\n        additions: this.props.fetchedMakerOrders[key].additions,\r\n        ingredients: Object.keys(this.props.fetchedMakerOrders[key].ingredients)\r\n          .map(ing => ing),\r\n        address: this.props.fetchedMakerOrders[key].customerInfo.street,\r\n        price: this.props.fetchedMakerOrders[key].totalPrice\r\n      });\r\n    }\r\n\r\n    let pizzaTypesOrdersDisplay = (\r\n      <ul className=\"orders__orders-pizza-types__list\">\r\n        {pizzaTypesOrders.map(order => {\r\n          return (\r\n            <li\r\n              key={order.id}\r\n              className=\"orders__orders-pizza-types__order\">\r\n              <p className=\"orders__orders-pizza-types__text\">\r\n                Your pizzas\r\n              </p>\r\n              <ul className=\"orders__orders-pizza-types__pizzas\">\r\n                {order.pizzas.map(pizza => (\r\n                  <li\r\n                    key={order.id + pizza.name}\r\n                    className=\"single-order-pizza\">\r\n                    <p className=\"single-order-pizza__name\">\r\n                      {pizza.name}\r\n                    </p>\r\n                    <p className=\"single-order-pizza__size\">\r\n                      size: {pizza.size}cm\r\n                    </p>\r\n                    <p className=\"single-order-pizza__price\">\r\n                      price: ${pizza.price}\r\n                    </p>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <p className=\"orders__orders-pizza-types__address\">\r\n                delivery street: {order.address}\r\n              </p>\r\n              <p className=\"orders__orders-pizza-types__price\">\r\n                total price: ${order.totalPrice}\r\n              </p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n\r\n    if(pizzaTypesOrders.length === 0) {\r\n      pizzaTypesOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\"}}>You haven't ordered anything via \"pizza types orders\" yet</p>\r\n    }\r\n\r\n    let pizzaMakerOrdersDisplay = (\r\n      <ul className=\"orders__orders-pizza-maker__list\">\r\n        {pizzaMakerOrders.map(order => (\r\n          <li\r\n            key={order.id}\r\n            className=\"orders__orders-pizza-maker__order\">\r\n            <p className=\"pizza-maker__order-name\">\r\n              You custom pizza with following ingredients:\r\n            </p>\r\n            <ul className=\"pizza-maker__order-ings\">\r\n              <li className=\"pizza-maker__order-ing\">\r\n                {order.cheese}\r\n              </li>\r\n                {order.ingredients.map(ing => (\r\n                  <li\r\n                    key={ing}\r\n                    className=\"pizza-maker__order-ing\">\r\n                    {ing}\r\n                  </li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"pizza-maker__order-address\">\r\n              delivery street: {order.address}\r\n            </p>\r\n            <p className=\"pizza-maker__order-price\">\r\n              price: ${order.price}\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n\r\n    if(pizzaMakerOrders.length === 0) {\r\n      pizzaMakerOrdersDisplay = <p style={{textAlign: \"center\", fontSize: \"2rem\", padding: \"2rem 1rem\"}}>You haven't ordered anything via \"pizza maker orders yet\"</p>\r\n    }\r\n\r\n    let allOrders = (\r\n      <React.Fragment>\r\n        <h1 className=\"orders__title\">\r\n          your orders\r\n        </h1>\r\n        <section className=\"orders__content\">\r\n          <p className=\"orders__content-info\">\r\n            You can find all of your previous orders here.\r\n          </p>\r\n          <article className=\"orders__orders\">\r\n            <div className=\"orders__orders-pizza-types\">\r\n              <h4>Regular orders</h4>\r\n              {pizzaTypesOrdersDisplay}\r\n            </div>\r\n            <div className=\"orders__orders-pizza-maker\">\r\n              <h4>Custom pizza orders</h4>\r\n              {pizzaMakerOrdersDisplay}\r\n            </div>\r\n          </article>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n\r\n    if(!this.props.isAuthenticated) {\r\n      allOrders = (\r\n        <React.Fragment>\r\n          <p style={{fontSize: \"3rem\", textAlign: \"center\", padding: \"5rem\"}}>LOG IN TO SEE ALL ORDERS FROM THIS ADDRESS</p>\r\n          <Link \r\n            to=\"sign-up\"\r\n            style={{\r\n              fontSize: \"2rem\",\r\n              width: \"10rem\",\r\n              margin: \"0 auto 2rem auto\",\r\n              backgroundColor: \"#eee\",\r\n              textAlign: \"center\",\r\n              padding: \"0.5rem 1rem\"\r\n            }}>log in</Link>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return allOrders;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    fetchedTypesOrders: state.pizzaTypes.fetchedOrders,\r\n    fetchedMakerOrders: state.pizzaMaker.fetchedOrders,\r\n    isAuthenticated: state.authenticate.token !==null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchPizzaTypesOrders: () => dispatch(actions.fetchPizzaTypesOrders()),\r\n    onFetchPizzaMakerOrders: () => dispatch(actions.fetchPizzaMakerOrders())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YourOrders);\r\n"],"sourceRoot":""}