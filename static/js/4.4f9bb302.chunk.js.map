{"version":3,"sources":["pages/Job/Job.js","components/UI/Form/Form.js","components/UI/Input/Input.js"],"names":["Job","state","jobForm","jobType","elementType","label","elementConfig","options","value","displayedValue","validation","valid","firstName","type","placeholder","required","touched","lastName","gender","birthDate","city","address","phone","highSchool","university","driverLicence","additionalInfo","formIsValid","checkInputValidity","rules","isValid","trim","minLength","length","isEmail","test","inputChangedHandler","event","inputIdentifier","formElements","target","formValid","setState","formSubmitHandler","preventDefault","info","key","props","onJobApply","applicationFinished","setTimeout","history","replace","formInputs","this","push","id","details","form","map","formElement","validationRequired","inputChanged","Fragment","className","style","display","formCustomClassname","submitBtnDisabled","formButtonText","submitForm","Component","connect","job","dispatch","actions","onSubmit","children","disabled","input","inputClasses","join","onChange","name","option"],"mappings":"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","file":"static/js/4.4f9bb302.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './job.scss';\r\nimport Form from '../../components/UI/Form/Form';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Job extends Component {\r\n  state = {\r\n    jobForm: {\r\n      jobType: {\r\n        elementType: \"select\",\r\n        label: \"Select job\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"pizza maker\",\r\n              displayedValue: \"Pizza Maker\"\r\n            },\r\n            {\r\n              value: \"delivery guy\",\r\n              displayedValue: \"Delivery Guy\"\r\n            },\r\n            {\r\n              value: \"seller\",\r\n              displayedValue: \"Seller\"\r\n            }\r\n          ]\r\n        },\r\n        value: \"pizza maker\",\r\n        validation: {},\r\n        valid: true\r\n      },\r\n      firstName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"First Name\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      lastName: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Last Name\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      gender: {\r\n        elementType: \"select\",\r\n        label: \"Gender\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"male\",\r\n              displayedValue: \"Male\"\r\n            },\r\n            {\r\n              value: \"female\",\r\n              displayedValue: \"Female\"\r\n            }\r\n          ]\r\n        },\r\n        value: \"male\",\r\n        validation: {},\r\n        valid: true\r\n      },\r\n      birthDate: {\r\n        label: \"Birthday\",\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"date\",\r\n          placeholder: \"First Name\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      city: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"City\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      address: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Address\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      phone: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Your Phone\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      highSchool: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"High School\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      university: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"University\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false, \r\n        valid: false\r\n      },\r\n      driverLicence: {\r\n        label: \"Driving Licence\",\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"none\",\r\n              displayedValue: \"None\"\r\n            },\r\n            {\r\n              value: \"A\",\r\n              displayedValue: \"A category\"\r\n            },\r\n            {\r\n              value: \"B\",\r\n              displayedValue: \"B category\"\r\n            },\r\n            {\r\n              value: \"C\",\r\n              displayedValue: \"C category\"\r\n            },\r\n            {\r\n              value: \"D\",\r\n              displayedValue: \"D category\"\r\n            },\r\n            {\r\n              value: \"A and B\",\r\n              displayedValue: \"A and B\"\r\n            },\r\n            {\r\n              value: \"A and C\",\r\n              displayedValue: \"A and C\"\r\n            },\r\n            {\r\n              value: \"A and D\",\r\n              displayedValue: \"A and D\"\r\n            },\r\n            {\r\n              value: \"B and C\",\r\n              displayedValue: \"B and C\"\r\n            },\r\n            {\r\n              value: \"B and D\",\r\n              displayedValue: \"B and D\"\r\n            },\r\n            {\r\n              value: \"C and D\",\r\n              displayedValue: \"C and D\"\r\n            },\r\n          ]\r\n        },\r\n        validation: {},\r\n        valid: true\r\n      },\r\n      additionalInfo: {\r\n        elementType: \"textarea\",\r\n        elementConfig: {\r\n          placeholder: \"Additional info about you\"\r\n        },\r\n        value: \"\",\r\n        validation: {},\r\n        valid: true\r\n      }\r\n    },\r\n    formIsValid: false\r\n  }\r\n  checkInputValidity = (rules, value) => {\r\n    let isValid = true;\r\n\r\n    if(rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if(rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if(rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid\r\n    }\r\n    return isValid;\r\n  }\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const formElements = {\r\n      ...this.state.jobForm,\r\n      [inputIdentifier]: {\r\n        ...this.state.jobForm[inputIdentifier],\r\n        value: event.target.value,\r\n        valid: this.checkInputValidity(this.state.jobForm[inputIdentifier].validation, event.target.value),\r\n        touched: true\r\n      }\r\n    };\r\n\r\n    let formValid = true;\r\n    for(const inputIdentifier in formElements) {\r\n      formValid = formElements[inputIdentifier].valid && formValid\r\n    }\r\n\r\n    this.setState({\r\n      jobForm: formElements,\r\n      formIsValid: formValid\r\n    });\r\n  }\r\n  formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    \r\n    const info = {};\r\n\r\n    for(const key in this.state.jobForm) {\r\n      info[key] = this.state.jobForm[key].value;\r\n    }\r\n\r\n    this.props.onJobApply(info);\r\n    if(!this.props.applicationFinished) {\r\n      setTimeout(() => {\r\n        this.props.history.replace(\"/\");\r\n      }, 2000)\r\n    }\r\n  }\r\n  render() {\r\n    const formInputs = [];\r\n    for(const key in this.state.jobForm) {\r\n      formInputs.push({\r\n        id: key,\r\n        details: this.state.jobForm[key]\r\n      })\r\n    }\r\n\r\n    const form = formInputs.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        label={formElement.details.label}\r\n        elementType={formElement.details.elementType}\r\n        elementConfig={formElement.details.elementConfig}\r\n        value={formElement.details.value}\r\n        touched={formElement.details.touched}\r\n        validationRequired={formElement.details.validation}\r\n        valid={formElement.details.valid}\r\n        inputChanged={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n    ))\r\n    return (\r\n      <React.Fragment>\r\n        <div \r\n          className=\"job__application-finished\"\r\n          style={{\r\n            display: this.props.applicationFinished ? \"block\" : \"none\"\r\n          }}>\r\n          You applied for a job successfully! We'll contact you later\r\n        </div>\r\n        <h1 className=\"job__title\">\r\n          apply for a job\r\n        </h1>\r\n        <section className=\"job__content\">\r\n          <p className=\"job__content-info\">\r\n            We currently need pizza makers, delivery guys and pizza sellers. Fill the fields and send us your application. We will go through it and give you a call to notify you whether the resime satisfy our criteria. Wish you luck!\r\n          </p>\r\n          <Form\r\n            formCustomClassname=\"job\"\r\n            submitBtnDisabled={this.state.formIsValid}\r\n            formButtonText=\"send\"\r\n            submitForm={this.formSubmitHandler}>\r\n            {form}\r\n          </Form>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    applicationFinished: state.job.applicationFinished\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onJobApply: (info) => dispatch(actions.jobApply(info))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Job);\r\n","import React from 'react';\r\nimport './form.scss';\r\n\r\nconst form = props => {\r\n  return (\r\n    <form \r\n      className={`form form__${props.formCustomClassname}`}\r\n      onSubmit={props.submitForm}>\r\n      {props.children}\r\n      <button \r\n        className=\"form__button\"\r\n        disabled={!props.submitBtnDisabled}>\r\n        {props.formButtonText}\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default form\r\n","import React from 'react';\r\nimport './input.scss';\r\n\r\nconst input = props => {\r\n  let input = null;\r\n\r\n  let inputClasses = [\"form-input\"];\r\n\r\n  if(props.validationRequired && props.touched && !props.valid) {\r\n    inputClasses.push(\"input-invalid\");\r\n  }\r\n  if(props.valid) {\r\n    inputClasses.push(\"input-valid\");\r\n  }\r\n  switch(props.elementType) {\r\n    case(\"input\"):\r\n      input = <input\r\n        className={inputClasses.join(\" \")}\r\n        {...props.elementConfig}\r\n        value={props.value}\r\n        onChange={props.inputChanged} />;\r\n      break;\r\n    case(\"select\"):\r\n      input = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          name={props.elementConfig.name}\r\n          onChange={props.inputChanged}>\r\n            {props.elementConfig.options.map(option => (\r\n              <option\r\n                key={option.value}\r\n                value={option.value}>\r\n                {option.displayedValue}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      );\r\n      break;\r\n    case(\"textarea\"):\r\n      input = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.inputChanged}>\r\n\r\n        </textarea>\r\n      );\r\n      break;\r\n    default:\r\n      input = <input />;\r\n  }\r\n  return (\r\n    <div className=\"input-container\">\r\n      {props.label ? <label className=\"input-label\">{props.label}</label> : null}\r\n      {input}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default input;\r\n"],"sourceRoot":""}