{"version":3,"sources":["pages/Order/Order.js","components/UI/Form/Form.js","components/UI/Input/Input.js"],"names":["Order","state","modalOpen","currentPizzaSizes","currentPizzaPrices","totalPrice","orderForm","name","elementType","elementConfig","type","placeholder","validation","required","touched","value","street","phone","formIsValid","pizzaSizeChangedHandler","event","pizzaIndex","pizzaPrices","pizzaSizes","target","props","orderStore","prices","price","size","newTotalPrice","reduce","sum","el","setState","removePizzaFromOrderStoreHandler","pizza","onRemovePizzaFromOrderStore","currentPizzaPricesCopy","deletedPizzaPrice","find","index","newCurrentPizzaPrices","filter","prevState","checkInputValidity","rules","isValid","trim","minLength","length","isEmail","test","inputChangedHandler","inputIdentifier","updatedOrderForm","valid","formValid","formSubmitHandler","preventDefault","isAuthenticated","history","replace","closeModalHandler","orderPizzasHandler","orderData","pizzas","forEach","customerInfo","onOrderPizzas","initialPizzaPrices","this","map","initialPizzaSizes","currentTotalPrice","redirect","to","className","onClick","src","imageUrl","alt","ingredients","ing","htmlFor","id","onChange","formInputs","key","push","details","Fragment","style","display","orderSuccess","closeModal","cancelled","continued","marginBottom","textAlign","padding","order","fontWeight","textTransform","formCustomClassname","formButtonText","submitBtnDisabled","submitForm","formElement","validationRequired","inputChanged","Component","connect","pizzaTypes","authenticate","token","dispatch","actions","form","onSubmit","children","disabled","input","inputClasses","join","options","option","displayedValue","label"],"mappings":"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","file":"static/js/5.320fdf45.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './order.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport Form from '../../components/UI/Form/Form';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\n\r\nclass Order extends Component {\r\n  state = {\r\n    modalOpen: false,\r\n    currentPizzaSizes: [],\r\n    currentPizzaPrices: [],\r\n    totalPrice: 0,\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\"\r\n        },\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false,\r\n        value: \"\"\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Street\"\r\n        },\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false,\r\n        value: \"\"\r\n      },\r\n      phone: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Phone Number\"\r\n        },\r\n        validation: {\r\n          required: true\r\n        },\r\n        touched: false,\r\n        value: \"\"\r\n      },\r\n    },\r\n    formIsValid: false\r\n  }\r\n  componentDidMount() {\r\n    let initialPizzaPrices = this.props.orderStore.map(pizza => pizza.prices[0].price);\r\n\r\n    let initialPizzaSizes = this.props.orderStore.map(pizza => pizza.prices[0].size)\r\n\r\n    let currentTotalPrice = initialPizzaPrices.reduce((sum, el) => {\r\n      return sum + el;\r\n    }, 0);\r\n\r\n    this.setState({\r\n      currentPizzaPrices: initialPizzaPrices,\r\n      currentPizzaSizes: initialPizzaSizes,\r\n      totalPrice: currentTotalPrice\r\n    });\r\n  }\r\n  pizzaSizeChangedHandler = (event, pizzaIndex) => {\r\n    const pizzaPrices = [\r\n      ...this.state.currentPizzaPrices\r\n    ];\r\n    const pizzaSizes = [\r\n      ...this.state.currentPizzaSizes\r\n    ]\r\n    if(event.target.value === \"32\") {\r\n      pizzaPrices[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[0].price;\r\n      pizzaSizes[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[0].size;\r\n    } else if(event.target.value === \"42\") {\r\n      pizzaPrices[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[1].price;\r\n      pizzaSizes[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[1].size;\r\n    } else if(event.target.value === \"50\") {\r\n      pizzaPrices[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[2].price;\r\n      pizzaSizes[pizzaIndex] = this.props.orderStore[pizzaIndex].prices[2].size;\r\n    }\r\n\r\n    let newTotalPrice = pizzaPrices.reduce((sum, el) => {\r\n      return sum + el;\r\n    }, 0);\r\n\r\n    this.setState({\r\n      currentPizzaPrices: pizzaPrices,\r\n      totalPrice: newTotalPrice\r\n    })\r\n  }\r\n  removePizzaFromOrderStoreHandler = (pizza, pizzaIndex) => {\r\n    this.props.onRemovePizzaFromOrderStore(pizza);\r\n\r\n    const currentPizzaPricesCopy = [\r\n      ...this.state.currentPizzaPrices\r\n    ];\r\n    \r\n    let deletedPizzaPrice = currentPizzaPricesCopy.find((price, index) => index === pizzaIndex);\r\n\r\n    const newCurrentPizzaPrices = currentPizzaPricesCopy.filter((pizza, index) => index !== pizzaIndex);\r\n    this.setState(prevState => {\r\n      return {\r\n        totalPrice: prevState.totalPrice - deletedPizzaPrice,\r\n        currentPizzaPrices: newCurrentPizzaPrices\r\n      }\r\n    })\r\n  }\r\n  checkInputValidity = (rules, value) => {\r\n    let isValid = true;\r\n\r\n    if(rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if(rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if(rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid\r\n    }\r\n    return isValid;\r\n  }\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedOrderForm = {\r\n      ...this.state.orderForm,\r\n      [inputIdentifier]: {\r\n        ...this.state.orderForm[inputIdentifier],\r\n        touched: true,\r\n        value: event.target.value,\r\n        valid: this.checkInputValidity(this.state.orderForm[inputIdentifier].validation, event.target.value)\r\n      }\r\n    };\r\n\r\n    let formValid = true;\r\n    for(const inputIdentifier in updatedOrderForm) {\r\n      formValid = updatedOrderForm[inputIdentifier].valid && formValid;\r\n    }\r\n\r\n    this.setState({\r\n      orderForm: updatedOrderForm,\r\n      formIsValid: formValid\r\n    })\r\n  }\r\n  formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    if(this.props.isAuthenticated) {\r\n      this.setState({modalOpen: true})\r\n    } else {\r\n      this.props.history.replace(\"/sign-up\");\r\n    }\r\n  }\r\n  closeModalHandler = () => {\r\n    this.setState({modalOpen: false})\r\n  }\r\n  orderPizzasHandler = () => {\r\n    const orderData = {\r\n      pizzas: {}\r\n    };\r\n    this.props.orderStore.forEach((pizza, index) => {\r\n      orderData.pizzas[pizza.name] = {\r\n        name: pizza.name,\r\n        size: this.state.currentPizzaSizes[index],\r\n        price: this.state.currentPizzaPrices[index]\r\n      }\r\n    });\r\n\r\n    orderData.customerInfo = {\r\n      name: this.state.orderForm.name.value,\r\n      street: this.state.orderForm.street.value,\r\n      phone: this.state.orderForm.phone.value\r\n    }\r\n\r\n    orderData.totalPrice = this.state.totalPrice;\r\n\r\n    this.props.onOrderPizzas(orderData);\r\n\r\n    this.closeModalHandler();\r\n  }\r\n  render() {\r\n    let redirect = null;\r\n    if(this.props.orderStore.length === 0) {\r\n      redirect = <Redirect to=\"/\"/>\r\n    }\r\n    let pizzas = <p>No orders yet</p>;\r\n    if(this.props.orderStore.length > 0) {\r\n      pizzas = this.props.orderStore.map((pizza, pizzaIndex) => {\r\n        return (\r\n          <div key={pizza.id} className=\"pizza-display\">\r\n            <div \r\n              className=\"pizza-display__remove\"\r\n              onClick={() => this.removePizzaFromOrderStoreHandler(pizza, pizzaIndex)}\r\n              >\r\n              <FaTimes />\r\n            </div>\r\n            <div className=\"pizza-display__img\">\r\n              <img src={pizza.imageUrl} alt={pizza.name}/>\r\n            </div>\r\n            <p className=\"pizza-display__name\">\r\n              {pizza.name}\r\n            </p>\r\n            <div className=\"pizza-display__flex\">\r\n              <div className=\"pizza-display__info\">\r\n                <p className=\"pizza-display__ing-title\">\r\n                  ingredients:\r\n                </p>\r\n                <ul className=\"pizza-display__ingredients\">\r\n                  {pizza.ingredients.map((ing, index) => (\r\n                  <li\r\n                    key={index}\r\n                    className=\"pizza-display__ing\">\r\n                    {ing}\r\n                  </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n              <div className=\"pizza-display__pricing\">\r\n                <label htmlFor=\"size\">\r\n                  pizza size:\r\n                </label>\r\n                <select name=\"size\" id=\"size\" onChange={(event) => this.pizzaSizeChangedHandler(event, pizzaIndex)}>\r\n                  {pizza.prices.map(size => (\r\n                    <option \r\n                      key={size.size}\r\n                      value={size.size}>\r\n                      {size.size}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <p className=\"pizza-display__price-text\">\r\n                  pizza price: $<span className=\"price\">{this.state.currentPizzaPrices[pizzaIndex]}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    )}\r\n\r\n    let formInputs = [];\r\n    for(const key in this.state.orderForm) {\r\n      formInputs.push({\r\n        id: key,\r\n        details: this.state.orderForm[key]\r\n      });\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {redirect}\r\n        <div \r\n          className=\"order__finished\"\r\n          style={{\r\n            display: this.props.orderSuccess ? \"block\" : \"none\"\r\n          }}>\r\n          Your order have been successfull! See you in no time!\r\n        </div>\r\n        <Modal\r\n          modalOpen={this.state.modalOpen}\r\n          closeModal={this.closeModalHandler}\r\n          cancelled={this.closeModalHandler}\r\n          continued={this.orderPizzasHandler}\r\n          >\r\n          <h2 style={{\r\n            marginBottom: \"1.5rem\"\r\n          }}>You ordered:</h2>\r\n          <ol style={{\r\n            textAlign: \"left\",\r\n            padding: \"0 1rem\"\r\n          }}>\r\n            {this.props.orderStore.map((order, index) => (\r\n              <li\r\n                key={order.id}\r\n                style={{marginBottom: \"1rem\"}}\r\n                >\r\n                <p>\r\n                  <span style={{fontWeight: \"bold\"}}>Pizza name: </span>\r\n                  <span style={{textTransform: \"capitalize\"}}>{order.name}</span>\r\n                </p>\r\n                <p>\r\n                  <span style={{fontWeight: \"bold\"}}>size: </span>\r\n                  <span>{this.state.currentPizzaSizes[index]}cm</span>\r\n                </p>\r\n                <p>\r\n                  <span style={{fontWeight: \"bold\"}}>price: </span>\r\n                  <span>\r\n                    ${this.state.currentPizzaPrices[index]}\r\n                  </span>\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n          <p>Total price: ${this.state.totalPrice}</p>\r\n        </Modal>\r\n        <h1 className=\"order__title\">\r\n          order your pizza\r\n        </h1>\r\n        <section className=\"order__content\">\r\n          <h3 className=\"order__pizza-title\">\r\n            ready to order:\r\n          </h3>\r\n          <article className=\"order__pizza\">\r\n            <div className=\"order__pizza-pizza\">\r\n              {pizzas}\r\n            </div>\r\n            <p className=\"order__total-price\">\r\n              Total Price: $ \r\n              <span>{this.state.totalPrice}</span>\r\n            </p>\r\n            <div className=\"order__more\">\r\n              <Link to=\"/pizza-types\">\r\n                order more pizzas\r\n              </Link>\r\n            </div>\r\n            <div className=\"order__form\">\r\n              <h4 className=\"order__form-title\">\r\n                enter your order info\r\n              </h4>\r\n              <Form\r\n                formCustomClassname=\"order\"\r\n                formButtonText={this.props.isAuthenticated ? \"order now\" : \"sign up to order\"}\r\n                submitBtnDisabled={this.state.formIsValid}\r\n                submitForm={this.formSubmitHandler}>\r\n                {formInputs.map(formElement => {\r\n                  return <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.details.elementType}\r\n                    elementConfig={formElement.details.elementConfig}\r\n                    value={formElement.details.value}\r\n                    touched={formElement.details.touched}\r\n                    validationRequired={formElement.details.validation}\r\n                    valid={formElement.details.valid}\r\n                    inputChanged={event => this.inputChangedHandler(event, formElement.id)} />\r\n                })}\r\n              </Form>\r\n            </div>\r\n          </article>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    pizzaTypes: state.pizzaTypes.pizzaTypes,\r\n    orderStore: state.pizzaTypes.orderStore,\r\n    isAuthenticated: state.authenticate.token !== null,\r\n    orderSuccess: state.pizzaTypes.orderSuccess\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onRemovePizzaFromOrderStore: (pizza) => dispatch(actions.removePizzaFromOrderStore(pizza)),\r\n    onOrderPizzas: (orderData) => dispatch(actions.orderPizzas(orderData))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Order);\r\n","import React from 'react';\r\nimport './form.scss';\r\n\r\nconst form = props => {\r\n  return (\r\n    <form \r\n      className={`form form__${props.formCustomClassname}`}\r\n      onSubmit={props.submitForm}>\r\n      {props.children}\r\n      <button \r\n        className=\"form__button\"\r\n        disabled={!props.submitBtnDisabled}>\r\n        {props.formButtonText}\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default form\r\n","import React from 'react';\r\nimport './input.scss';\r\n\r\nconst input = props => {\r\n  let input = null;\r\n\r\n  let inputClasses = [\"form-input\"];\r\n\r\n  if(props.validationRequired && props.touched && !props.valid) {\r\n    inputClasses.push(\"input-invalid\");\r\n  }\r\n  if(props.valid) {\r\n    inputClasses.push(\"input-valid\");\r\n  }\r\n  switch(props.elementType) {\r\n    case(\"input\"):\r\n      input = <input\r\n        className={inputClasses.join(\" \")}\r\n        {...props.elementConfig}\r\n        value={props.value}\r\n        onChange={props.inputChanged} />;\r\n      break;\r\n    case(\"select\"):\r\n      input = (\r\n        <select\r\n          value={props.value}\r\n          className={inputClasses.join(\" \")}\r\n          name={props.elementConfig.name}\r\n          onChange={props.inputChanged}>\r\n            {props.elementConfig.options.map(option => (\r\n              <option\r\n                key={option.value}\r\n                value={option.value}>\r\n                {option.displayedValue}\r\n              </option>\r\n            ))}\r\n        </select>\r\n      );\r\n      break;\r\n    case(\"textarea\"):\r\n      input = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.inputChanged}>\r\n\r\n        </textarea>\r\n      );\r\n      break;\r\n    default:\r\n      input = <input />;\r\n  }\r\n  return (\r\n    <div className=\"input-container\">\r\n      {props.label ? <label className=\"input-label\">{props.label}</label> : null}\r\n      {input}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default input;\r\n"],"sourceRoot":""}